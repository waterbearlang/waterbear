#!/usr/bin/env node

(function(){

// I tried building a concatenation step in Grunt, but it ended up being more complex than just writing it myself
var fs = require('fs');
var path = require('path');

// var validateJson = require('./validate').validateJson;
try{
    var cleanCSS = require('clean-css');
    var UglifyJS = require('uglify-js');
    var yargs = require('yargs');
}catch(e){
    console.warn('Unable to import libraries, try running "npm install" first');
}
var ideTemplate = fs.readFileSync('template/ide.html', 'utf8');
var runtimeTemplate = fs.readFileSync('template/runtime.html', 'utf8');
var ideStyles = ['workspace', 'layout', 'blocks', 'menu', 'fonts/font-awesome/css/font-awesome.min'];
var runtimeStyles = [];
var scripts_pre = ['wb', 'queryparams', 'util', 'event', 'persistence', 'drag', 'drag-wb', 'uuid', 'block', 'socket', 'search', 'file', 'undo', 'widget/accordion', 'widget/block_context_menu', /*'widget/codemap',*/ 'ui', 'menu'/*, 'codemap' */];
var scripts_post = ['l10n', 'workspace'];

var localizations = {
    javascript: {
        'zh': ['control', 'array']
    }

};

var languages = fs.readdirSync('languages').filter(function(lang){
        return fs.statSync('languages/' + lang).isDirectory();
    });

var config = {};
languages.forEach(function(lang){
    config[lang] = JSON.parse(fs.readFileSync('languages/' + lang + '/config.json'));
});

function clear(){
    if (fs.existsSync('dist')){
        var files = fs.readdirSync('dist');
        files.forEach(function(filename){
            fs.unlinkSync(path.join('dist', filename));
        });
    }else{
        fs.mkdirSync('dist');
    }
};

function append(str, dest){
    fs.appendFileSync(dest, str);
}


function cat(src, dest){
    if (!fs.existsSync(src))
        return;
    fs.appendFileSync(dest, '\n/*begin ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
    fs.appendFileSync(dest, fs.readFileSync(src, 'utf8'));
    fs.appendFileSync(dest, '\n/*end ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
}

function endswith(str, suffix){
    return RegExp(suffix + '$').test(str);
}

function concat(src, dest, files, ext, suffix, before, after){
    before = before || '';
    after = after || '';
    suffix = suffix || '';
    var contents, rawContents;
    files.forEach(function(pathname){
        var filename = path.join(src, pathname) + suffix + ext;
        try{
            rawContents = fs.readFileSync(path.join(filename), 'utf8');
            contents = before + rawContents + after;
        }catch(e){
            // console.log('file %s not found', path.join(filename));
            // console.log('Could not read %s: %s', path.join(filename), e.message);
            return;
        }
        if (ext === '.json'){
            if (!validateJson(filename, rawContents)) return;
        }
        fs.appendFileSync(dest, '\n/*begin ' + filename.replace(/\\/g, '/') + '*/\n');
        fs.appendFileSync(dest, contents);
        fs.appendFileSync(dest, '\n/*end ' + filename.replace(/\\/g, '/') + '*/\n');
    });
}

// function build(){
//     clear();
//     var errors = false;
//     var stylefiles = {};
//     Object.keys(plugins).forEach(function(lang){
//         console.log(" == "+lang+" == ");
//         var files = plugins[lang];
//         var src = path.join('languages', lang);
//         var dest = path.join('dist', lang);
//         if (typeof libs[lang] != "undefined") {
//             libs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '.js'); });
//         }
//         if (typeof styles[lang] == "undefined") {
//             console.error("No styles are included. Please check the styles array.");
//             console.error(" == "+lang+" FAILED == ");
//             errors = true;
//             return -1;
//         }
//         styles[lang].concat(styles)
//             .map(function(stylename){ return 'stylesheets/' + stylename + '.css';})
//             .forEach(function(stylename){cat(stylename, dest + '.css'); });

//         // Add localization file string
//         fileStr = "\n\n/* list of files used for localization of blocks */\nvar l10nFiles = " + JSON.stringify(localizations) + ";\n\n";
//         append(fileStr, dest + '.js');

//         scripts.forEach(function(scriptname){
//             cat('scripts/' + scriptname + '.js', dest + '.js');
//         });

//         // Build CSS
//         concat(src, dest + '.css', files, '.css');

//         // Build Waterbear support
//         concat(src, dest + '.js', files, '.js');

//         // Build Waterbear blocks
//         concat(src, dest + '.js', files, '.json', null, 'wb.menu(', ');');

//         // Attach l10n file to end of javascript dist
//         cat('scripts/' + 'l10n' + '.js', dest + '.js');

//         // Build runtime support
//         if (lang === 'javascript' || lang === 'processingjs'){
//             pluginlibs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '_runtime.js'); })
//             concat(src, dest + '_runtime.js', files, '.js', '_runtime');
//         }
//     });
//    buildHtmlFiles();
// }

// FIXME: examples, stage, and controls are basically the same function,
// make them actually the same function

function template(name){
    function getTemplate(lang){
        var _template = "";
        var tplPath = 'languages/' + lang + '/templates/' + name + '.html';
        if (fs.existsSync(tplPath)) {
            _template = fs.readFileSync(tplPath);
        }
        else {
            _template = fs.readFileSync('languages/javascript/templates/' + name + '.html');
            console.warn("Example template file for %s located at %s is missing. Defaulting to ''.", lang, tplExamplePath);
        }
        return _template;
    }
    return getTemplate;
}

var examples = template('examples');
var stage = template('stage');
var controls = template('controls');

function cssInclude(filepath, urlpath, styleName){
    if (fs.existsSync(filepath + styleName + '.css')){
        return '<link rel="stylesheet" href="' + urlpath + styleName + '.css" >';
    }
    // console.log('skipping %s%s.css', filepath, styleName);
    return '';
}

function cssIdeIncludes(lang){
    var includes = [];
    ideStyles.forEach(function(styleName){
        includes.push(cssInclude('stylesheets/', '../../stylesheets/', styleName));
    });
    config[lang].ideStyles.forEach(function(styleName){
        includes.push(cssInclude('stylesheets/', '../../stylesheets/', styleName));
    });
    includes.push(cssInclude('languages/' + lang + '/', '', lang));
    config[lang].plugins.forEach(function(plugin){
        includes.push(cssInclude('languages/' + lang + '/blocks/', 'blocks/', plugin));
    });
    return includes.join('\n');
}

function cssRuntimeIncludes(lang){
    var includes = [];
    runtimeStyles.forEach(function(styleName){
        includes.push(cssInclude('stylesheets/', '../../stylesheets/', styleName));
    });
    config[lang].runtimeStyles.forEach(function(styleName){
        includes.push(cssInclude('stylesheets/', '../../stylesheets/', styleName));
    });
    return includes.join('\n');
}

function jsInclude(filepath, urlpath, scriptName){
    if (fs.existsSync(filepath + scriptName + '.js')){
        return '<script src="' + urlpath + scriptName + '.js"></script>';
    }
    // console.log('skipping %s%s.js',filepath,scriptName);
    return '';
}

function jsIdeIncludes(lang){
    var includes = [];
    config[lang].ideLibs.forEach(function(scriptName){
        includes.push(jsInclude('lib/', '../../lib/', scriptName));
    });
    scripts_pre.forEach(function(scriptName){
        includes.push(jsInclude('scripts/', '../../scripts/', scriptName));
    });
    includes.push(jsInclude('languages/' + lang + '/', '', 'ide'));
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('languages/' + lang + '/blocks/', 'blocks/', plugin + '_ide'));
    });
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('languages/' + lang + '/blocks/', 'blocks/',  plugin + '_blockmenu'));
    });
    scripts_post.forEach(function(scriptName){
        includes.push(jsInclude('scripts/', '../../scripts/', scriptName));
    });
    return includes.join('\n');
}

function jsRuntimeIncludes(lang){
    var includes = [jsInclude('languages/' + lang + '/', '', 'runtime')];
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('languages/' + lang + '/blocks/', 'blocks/',  plugin + '_runtime'));
    });
    config[lang].runtimeLibs.forEach(function(libName){
        includes.push(jsInclude('lib/', '../../lib/',  libName));
    });
    return includes.join('\n');
}

function buildHtmlFiles(){
    buildIdeHtmlFiles();
    buildRuntimeHtmlFiles();
}

function buildIdeHtmlFiles(){
    languages.forEach(function(lang){
        // Build HTML file
        var html = ideTemplate.replace(/<\?examples\?>/g, examples(lang))
                               .replace(/<\?controls\?>/g, controls(lang))
                               .replace(/<\?stage\?>/g, stage(lang))
                               .replace(/<\?cssincludes\?>/g, cssIdeIncludes(lang))
                               .replace(/<\?jsincludes\?>/g, jsIdeIncludes(lang))
                               .replace(/<\?language\?>/g, lang);
        fs.writeFileSync('languages/' + lang + '/index.html', html, 'utf8')
    });
};

function buildRuntimeHtmlFiles(){
    languages.forEach(function(lang){
        if (config[lang].runsInBrowser){
            var html = runtimeTemplate.replace(/<\?jsincludes\?>/g, jsRuntimeIncludes(lang))
                                      .replace(/<\?cssincludes\?>/g,cssRuntimeIncludes(lang));
            fs.writeFileSync('languages/' + lang + '/runtime.html', html, 'utf8');
        }
    });
}

// build();
buildHtmlFiles();


})();
