#!/usr/bin/env node

console.log("Starting")

// I tried building a concatenation step in Grunt, but it ended up being more complex than just writing it myself
var fs = require('fs');
var path = require('path');
var validateJson = require('./validate').validateJson;
// var cleanCSS = require('clean-css');
// var UglifyJS = require('uglify-js');

var htmlTemplate = fs.readFileSync('template/template.html', 'utf8');

var plugins = {
    arduino: ['arduino', 'boolean', 'control', 'digitalio', 'math', 'serialio', 'timing', 'variables'],
    javascript: ['javascript', 'asset', 'control', 'sprite', 'voice', 'sound', 'array', 'boolean', 'canvas', 'color',  'image', 'math', 'random', 'vector', 'object', 'string', 'path', 'point', 'rect', 'sensing', 'motion', 'shape', 'geolocation', 'size', /*'social',*/ /*'fb'*/, 'text', 'matrix', 'fancy_friday'],
    minecraftjs: ['minecraftjs', 'control', 'game', 'player', 'position', 'blocks',  'camera', 'array', 'boolean', 'math', 'string'],
    demo: ['javascript', 'demo'],
    processingjs: ['processingjs', 'structure', 'environment', 'controls', 'shapes', 'input', 'colors', 'math', 'transform'],
};

var pluginlibs = {
    arduino: [],
    javascript: ['SAT'],
    minecraftjs: [],
    demo: [],
    processingjs: ['processing-1.4.1']
}

var universalStyles = ['workspace', 'layout', 'blocks', 'menu', 'fonts/fontawesome']

var styles = {
    arduino: [],
    javascript: ['highlight-github'],
    minecraftjs: ['highlight-github'],
    demo: ['highlight-github'],
    processingjs: ['highlight-github']
}

var scripts = ['ajax', 'queryparams', 'util', 'event', 'drag', 'uuid', 'block', 'file', 'undo', 'ui', 'workspace', 'blockprefs', 'menu'];

var libs = {
    arduino: ['events.min'],
    javascript: ['beautify', 'highlight', 'highlight-javascript','events.min'],
    minecraftjs: ['beautify', 'highlight', 'highlight-javascript','events.min'],
    demo: ['beautify', 'highlight', 'highlight-javascript','events.min'],
    processingjs: ['beautify', 'highlight', 'highlight-javascript', 'processing-1.4.1','events.min']
};


function clear(){
    if (fs.existsSync('dist')){
        var files = fs.readdirSync('dist');
        files.forEach(function(filename){
            fs.unlinkSync(path.join('dist', filename));
        });
    }else{
        fs.mkdirSync('dist');
    }
};


function cat(src, dest){
    if (!fs.existsSync(src))
        return;
    fs.appendFileSync(dest, '\n/*begin ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
    fs.appendFileSync(dest, fs.readFileSync(src, 'utf8'));
    fs.appendFileSync(dest, '\n/*end ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
}

function endswith(str, suffix){
    return RegExp(suffix + '$').test(str);
}

function concat(src, dest, files, ext, suffix, before, after){
    before = before || '';
    after = after || '';
    suffix = suffix || '';
    var contents, rawContents;
    files.forEach(function(pathname){
        var filename = path.join(src, pathname) + suffix + ext;
        try{
            rawContents = fs.readFileSync(path.join(filename), 'utf8');
            contents = before + rawContents + after;
        }catch(e){
            // console.log('file %s not found', path.join(filename));
            // console.log('Could not read %s: %s', path.join(filename), e.message);
            return;
        }
        if (ext === '.json'){
            if (!validateJson(filename, rawContents)) return;
        }
        fs.appendFileSync(dest, '\n/*begin ' + filename.replace(/\\/g, '/') + '*/\n');
        fs.appendFileSync(dest, contents);
        fs.appendFileSync(dest, '\n/*end ' + filename.replace(/\\/g, '/') + '*/\n');
    });
}

function build(){
    clear();
    var errors = false;
    Object.keys(plugins).forEach(function(lang){
        console.log(" == "+lang+" == ");
        var files = plugins[lang];
        var src = path.join('languages', lang);
        var dest = path.join('dist', lang);
        if (typeof libs[lang] != "undefined") {
            libs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '.js'); });
        }
        if (typeof styles[lang] == "undefined") {
            console.error("No styles are included. Please check the styles array.");
            console.error(" == "+lang+" FAILED == ");
            errors = true;
            return -1;
        }
        styles[lang].concat(universalStyles)
            .map(function(stylename){ return 'stylesheets/' + stylename + '.css';})
            .forEach(function(stylename){cat(stylename, dest + '.css'); });

        scripts.forEach(function(scriptname){cat('scripts/' + scriptname + '.js', dest + '.js'); });

        // Build CSS
        concat(src, dest + '.css', files, '.css');

        // Build Waterbear support
        concat(src, dest + '.js', files, '.js');

        // Build Waterbear blocks
        concat(src, dest + '.js', files, '.json', null, 'wb.menu(', ');');

        // Build runtime support
        if (lang === 'javascript' || lang === 'minecraftjs' || lang === 'processingjs'){
            pluginlibs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '_runtime.js'); })
            concat(src, dest + '_runtime.js', files, '.js', '_runtime');
        }

        // Build HTML file
        var tplExamplePath = 'template/' + lang + '.examples';
        var examples = "";
        if (fs.existsSync(tplExamplePath)) {
            examples = fs.readFileSync(tplExamplePath);
        }
        else {
            console.warn("Example template file for %s located at %s is missing. Defaulting to ''.", lang, tplExamplePath);
        }

        var tplStagePath = 'template/' + lang + '.stage';
        var stage = fs.readFileSync('template/' + "javascript" + '.stage');
        if (fs.existsSync(tplStagePath)) {
            stage = fs.readFileSync(tplStagePath);
        }
        else {
            console.warn("Stage template file for %s located at %s is missing. Defaulting to javascript's template.", lang, tplStagePath);
        }
        var html = htmlTemplate.replace(/<\?examples\?>/g, examples)
                               .replace(/<\?stage\?>/g, stage)
                               .replace(/<\?language\?>/g, lang);
        fs.writeFileSync(lang + '.html', html, 'utf8')
        console.log(" == "+lang+" complete == ");
    });

    if (!errors) {
        console.log("Success: The build completed successfully."); //@todo this is a bit misleading
    } else {
        console.error("FAILURE: The build completed with errors. Check the messages above.");
    }
};

build();
